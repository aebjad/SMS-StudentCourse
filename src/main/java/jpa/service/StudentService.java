package jpa.service;

import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;
import org.hibernate.HibernateException;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

public class StudentService implements StudentDAO {

    // declaring entity factory and manager
   private EntityManagerFactory factory;
   private EntityManager manager;

    //getAllStudents- This  method  reads  the student table in your  database and returns the data as a List<Student>
    @Override
    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        connect();
        try {
            Query query = manager.createQuery("select s from Student s", Student.class);
             students = query.getResultList();
        }catch (Exception e){
            System.out.println("getAllStudents "+e.getMessage());
            return null;
        } finally {
            disconnect();
            return students;
        }
    }

    // getStudentByEmail –This  method  takes  a Student’s  email  as  a
    //String  and  parses  the student list for a Student with that email and  returns  a  Student Object.
    @Override
    public Student getStudentByEmail(String sEmail) {
        connect();

        try {
            Student student = manager.find(Student.class, sEmail);
            return student;
        } catch (Exception e) {
            System.out.println("getStudentByEmail : " + e.getMessage());
            return null;
        } finally {
            disconnect();

        }

    }

    //validateStudent –This  method  takes  two parameters:  the  first one  is  the  user  email
    //and  the  second  one  is the  password  from  the user input. Return whether or not  student was found.
    @Override
    public boolean validateStudent(String sEmail, String sPassword) {

            Student student = getStudentByEmail(sEmail);
            if (student != null) {
                return student.getsPass().equals(sPassword);
            } else{
                System.out.println("Student not found or invalid email/password");
                return false;
           }
    }

    //registerStudentToCourse –After a successful student validation, this method takes a Student’s  email  and  a
    //Course ID. It checks in the  join  table  (i.e.Student_Course) generated by JPA to find if a Student with that
    //Email is currently attending a Course with that ID.If  the  Student  is  not attending  that  Course,
    //register the student to that  course;  otherwise not.
    @Override
    public void registerStudentToCourse(String sEmail, int cId) {
        // connect to the Database

       try {
           connect(); //initializing entity manager and factory
//               manager.getTransaction().begin();
//               Query query = manager.createNativeQuery("INSERT INTO student_course (student_email, course_id) VALUES (?,?)");
//               query.setParameter(1, sEmail);
//               query.setParameter(2, cId);
//               query.executeUpdate();
//               manager.getTransaction().commit();

           Student student = manager.find(Student.class, sEmail);
           manager.getTransaction().begin();
           Course course = manager.find(Course.class, cId);
           List<Course> courses = student.getsCourses();
           courses.add(course);
           student.setsCourses(courses);
           manager.persist(student);
           manager.getTransaction().commit();

       }catch(Exception e){
           manager.getTransaction().rollback();
           System.out.println("You are already registered in this course");
          // System.out.println("registerStudentToCourse "+e.getMessage());
       } finally {
           disconnect();
       }
    }

    // getStudentCourses–This method takes a Student’s Email as a parameter and would find all the courses a student is registered.
    public List<Course> getStudentCourses(String sEmail) {
        connect();

        try {
            Query query = manager.createNativeQuery("Select c.* from Course c JOIN student_course sc on c.id = sc.course_id " +
                                                     "WHERE sc.student_email = :email", Course.class);
            query.setParameter("email",sEmail);
            List<Course> studentCoursesList = query.getResultList();
            return studentCoursesList;

        } catch (Exception e){
            System.out.println(e.getStackTrace());
            return null;
        }
        finally {
            disconnect();

        }

      }

    // initializes entity factory and manager
    public void connect() {

        factory = Persistence.createEntityManagerFactory("SMS");
        manager = factory.createEntityManager();
    }

    // Closing entity factory and manager if they are not
    public void disconnect() {
        if (manager != null) {
            manager.close();
        }
        if (factory != null) {
            manager.close();
        }
    }

    // Add student is not requirement just to test it for myself
    public void addStudent(Student student) {
        // begin a transaction is required for creating or updating records
         connect();
        manager.getTransaction().begin();
        // tell the entity manager to save this object
        manager.persist(student);
        // commit the transaction to actually save the data to the database
        manager.getTransaction().commit();


    }

    // Delete student is not requirement just to test it for myself
    public int deleteStudent(String sEmail){
        connect();

        String sql = "DELETE FROM Student where email = :SEmail";

        // set this to use the correct entity
        Query query = manager.createQuery(sql);
        query.setParameter("SEmail", sEmail);

        manager.getTransaction().begin();
        int recordsUpdated = query.executeUpdate();
        manager.getTransaction().commit();

        return recordsUpdated;

    }
}

